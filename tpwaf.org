#+TITLE: TP Waf
#+STYLE: <link rel="stylesheet" type="text/css" href="org.css" />


* Introduction

Waf est un outil de construction de logiciel, dans la lignée des
autotools (configure, make), cmake, scons. Il permet de gérer la
configuration, la compilation et l'installation d'un logiciel avec une
syntaxe intuitive (en python), et des fonctionnalités (modules)
permettant d'écrire les scripts de construction très rapidement, quel
que soit le langage utilisé. 

Cette structure modulaire permet aux utilisateurs d'en étendre les
fonctionnalités selon leur besoin, et ainsi de s'adapter à la
complexité croissante des processus de construction (multiplicité des
langages, des architectures, interfaçage , etc). 

Waf est performant, portable, léger, et directement distribué avec
l'application qu'il construit, il ne requiert donc aucune installation
préalable. 

Ce TP a pour objectif de vous guider dans : 

+ l'écriture d'un simple script de construction incluant la
  configuration (mise en place d'options), la compilation (utilisant
  les fonctionnalités de compilation C/C++, Fortran et python) et
  l'installation.
+ l'utilisation de waf dans le cadre d'une application (performances
  et gestion des dépendances)
+ l'écriture d'extensions

Il reprend un certain nombre d'exemples du manuel d'utilisateur de waf
(the waf book http://docs.waf.googlecode.com/git/book_17/single.html). 

* Concepts de base

** Le binaire waf

Waf est distribué avec l'application qu'il construit sous la forme
d'un binaire nommé =waf= embarquant l'ensemble des fonctionnalités de
base de l'outil. \\
Les directives propres au logiciel qu'il construit sont écrites dans
un script nommé =wscript=. \\
L'ensemble des commandes du binaire sont documentées et accessibles à
l'utilisateur: 

#+BEGIN_SRC shell
./waf --help
#+END_SRC

#+BEGIN_VERSE
Ouvrir une fenêtre de commande, extraire l'archive jointe au TP et définir un alias pour l'ensemble du TP =alias waf=$PWD/waf=. 
Exécuter la commande ci-dessus pour obtenir la liste des commandes.
#+END_VERSE

La construction classique d'un outil passe par : 

#+BEGIN_SRC shell
waf configure       (ref:1)
waf install         (ref:2)
#+END_SRC

[[(1)]] configuration de l'installation \\
[[(2)]] construction et installation de l'outil

Ces commandes correspondent à des fonctions Python, qui peuvent être (re)définies au sein du =wscript=

#+BEGIN_SRC Python
def version():
    return 1.1
#+END_SRC

#+BEGIN_SRC python
def configure(ctx):
    v = version()
    print 'version %f'%v
#+END_SRC
    
#+BEGIN_VERSE
Ouvrir le fichier =concepts_base/wscript= et ajouter ces lignes de code à la suite du header. 
Vérifier par la commande =waf configure= que vos modifications ont bien été intégrées.  
#+END_VERSE

** L'environnement de construction

Les fichiers de construction générés par =waf= sont enregistrés dans
le répertoire =.build=. Le script =wscript= est situé à la racine
du projet.

#+BEGIN_SRC shell
tree
#+END_SRC

Ces fichiers sont effacés automatiquement à l'appel de la commande =distclean=

#+BEGIN_SRC shell
waf distclean
tree
#+END_SRC

#+BEGIN_VERSE
Exécuter ces commandes dans l'ordre pour afficher le contenu du répertoire =build=. 
#+END_VERSE


Cette configuration par défaut peut être modifiée, en tête du =wscript= 

#+BEGIN_SRC Python
top = './'
out = './build'
#+END_SRC

Il est possible d'utiliser plusieurs fichiers =wscript=. L'appel à la
fonction =recurse= permet de les appeler. 

#+BEGIN_SRC Python
def configure(ctx):
    ctx.recurse('src')
#+END_SRC

#+BEGIN_VERSE
Observer le contenu du fichier =concepts_base/src/wscript=
Modifier la fonction =configure= de =concepts_base/wscript= pour exécuter ce nouveau script. 
#+END_VERSE

** Persistence des données

Les informations récupérées lors de la phase de configuration sont
stockées dans les objets =Context= , et sur disque dans un fichier de cache:

#+BEGIN_SRC Python
def configure(ctx):
    ctx.env.FOO = 'bar'
#+END_SRC

#+BEGIN_SRC shell
more build/c4che/_cache.py
#+END_SRC

#+BEGIN_VERSE
Ajouter la définition d'une nouvelle variable d'environnement à la fonction =configure= de =concepts_base/wscript=. 
Vérifier sa présence dans le fichier de cache. 
#+END_VERSE

** Ajouter de nouvelles options

L'ajout de nouvelles options de configuration est réalisé via la
définition d'une fonction nommées =options= qui prend un object
=Context= comme unique argument. Le mécanisme utilisé est celui du
paquet Python de référence =optparse=. 

#+BEGIN_SRC Python
def options(ctx):
        ctx.add_option('--myoption', action='store', default=False, help='this is my option')

def configure(ctx):
	ctx.ENV.MYOPT = ctx.options.myoption

def build(bld):
        print(bld.env.MYOPT)
#+END_SRC

#+BEGIN_VERSE
Ajouter la définition d'une fonction =options= à =concepts_base/wscript=. 
Exécuter la configuration puis la construction afin de vérifier la bonne propagation de votre option. 
#+END_VERSE

** Outils de configuration

La librairie =waf= dispose de quelques outils prêt à l'emploi
permettant d'analyser l'environnement de construction. En voici
quelques exemples:

#+BEGIN_SRC Python   
def configure(ctx):
    ctx.find_program('touch', var='TOUCH')
    ctx.check_waf_version(mini='1.6.11')
    try:
       ctx.find_file('fstab', ['/opt', '/etc'])  
    except ctx.errors.ConfigurationError:
       self.to_log('fstab was not found (ignoring)'

def build(ctx):
    print ctx.ENV.TOUCH
#+END_SRC

#+BEGIN_VERSE
Compléter le script avec ces instructions. 
Exécuter la configuration puis la construction afin de vérifier la compatibilité de votre environnement. 
#+END_VERSE

** Manipulation des objets =Context=

Comme mentionné précedemment, les variables d'environnement sont
stockées dans l'attribut =ctx.env=. Elles peuvent être accédées de
deux manières: par un mécanisme d'attribut =ctx.env.FOO= ou de
dictionnaire =ctx.env["foo"]=. Les variables en question sont
généralement des listes, qu'il convient de manipuler via la méthode
=append=. 

#+BEGIN_SRC Python  
ctx.env.append_value('CFLAGS', ['-O2'])
#+END_SRC

Les objets =Context= peuvent être davantage modifiés en utilisant le
mécanisme de décorateur Python.

#+BEGIN_SRC Python 
from waflib.Configure import conf

@conf
def get_version (self)
    return 1.1

def configure (ctx):
    v = ctx.get_version()
#+END_SRC 

#+BEGIN_VERSE
Compléter le script avec ces instructions. 
Remplacer le précendent appel à la routine =version= par la méthode interne à l'object =Context=
#+END_VERSE

** Construction

Lors de la phase de construction, les fichiers sources sont compilés
en fichiers objets en suivant des règles définies comme suit: 

#+BEGIN_SRC Python 
def build (ctx):
   ctx (rule="touch ${TGT}", target="a.txt", color='BLUE',always = True)
   ctx (rule="touch ${TGT}", target="b.txt", color='BLUE')
   ctx (rule="cat ${SRC} > ${TGT}", source="a.txt b.txt", target="c.txt", color='PINK')
#+END_SRC 

Les dépendances entre les différentes tâches de construction sont
déduites des entrées / sorties. Dans ce cas, =a.txt= et =b.txt=
doivent être construit avant =c.txt=. =waf= parralélise
automatiquement toutes les tâches qui peuvent l'être. Dans cet exemple
=a.txt= et =b.txt= peuvent être construit simultanément. 

Le nombre maximum de jobs exécutés en parallèle peut être réglé par
l'option =waf -j4= par exemple pour 4 exécuteurs de tâches.

L'option =always= permet de forcer la reconstruction d'un objet
indépendamment des modifications apportées au fichier source.

#+BEGIN_VERSE
Compléter le script avec ces instructions. 
Exécuter la construction de manière séquentielle via la commande =waf step --files=a.txt=, puis parallèle avec =waf build=
#+END_VERSE

** Installation

L'installation est un cas particulier de construction.  Les
instructions spécifiques à l'installation des binaires sur le système
sont écrites dans la routine =build= et peuvent être définies sous la
condition 

#+BEGIN_SRC Python 
def build (ctx):
   if ctx.cmd == 'install':
      files = ctx.path.ant_glob("build/*.txt")
      ctx.install_files('${PREFIX}/txt', files) 
#+END_SRC 

#+BEGIN_VERSE
Compléter le script avec ces instructions. 
Exécuter la commande =waf install= . L'exécution doit retourner une erreur faute de droit suffisant sur le répertoire =prefix= par défaut =/usr/local=. 
Reconfigurer le préfixe via la commande =waf configure --prefix= puis recommencer l'installation. 
#+END_VERSE

** Empaquetage

La commande =waf dist= permet de construire automatiquement une
archive du projet, nommée par défaut =noname-1.0.tar.bz=. 
Pour modifier ce nom, il suffit d'ajouter en tête du script: 

#+BEGIN_SRC Python
APPNAME = "myapp"
VERSION = "1.1"
#+END_SRC

#+BEGIN_VERSE
Compléter le script avec ces instructions. 
Exécuter la commande =waf dist= puis observer le contenu de l'archive. 
#+END_VERSE


* Exemple en C/C++

#+BEGIN_VERSE
Reportez-vous à l'exemple fourni par =waf= dans =waf-1.6.11/demos/c++= \\
Réaliser la construction des différentes cibles. \\
Identifier les lignes du =wscript= correspondant à la construction d'une librairie statique, dynamique et d'un binaire. 
#+END_VERSE

* Exemple en Python

#+BEGIN_VERSE
Reportez-vous à l'exemple fourni par =waf= dans =waf-1.6.11/demos/python= \\
Réaliser la configuration et la construction des différentes cibles. \\
Identifier les lignes correspondant à la construction d'extension en langage C (simple fonction et module).  
#+END_VERSE

* Exemple en Fortran

#+BEGIN_VERSE
Reportez-vous à l'exemple fourni par =waf= dans =waf-1.6.11/demos/fortran=. \\
Les outils sont sensiblement les mêmes que ceux fournis dans l'exemple =C/C++=
#+END_VERSE

* Gestion des tâches et performances

** Groupes de tâches

Les tâches de construction sont contenues dans les objets =Task= et
manipulées par: 
+ le context de =build= capable de générer des listes de tâches
+ l'exécuteur de tâches qui contrôle l'exécution.

#+BEGIN_SRC Python
top = '.'
out = 'build'

def configure(conf):
        pass

def build(bld):
        bld(    rule   = 'cp ${SRC} ${TGT}', 
                source = 'wscript', 
                target = 'foobar.txt', 
        )
#+END_SRC

#+BEGIN_VERSE
Compléter le script avec ces instructions, et exécuter la construction de la cible. 
L'appel à la routine =bld= retourne une liste de tâche d'un seul élement. 
#+END_VERSE

Comme nous l'avons vu précédemment, les tâches peuvent être exécuter
en parallèle, grâce à l'option =-j=. Cette exécution parallèle
concerne l'ensemble des tâches d'une même liste, correspondant à un
=build group=. L'ordonnanceur attendra que toutes les tâches d'un même
groupe soient exécutées avant de traiter le groupe suivant.

#+BEGIN_SRC Python
top = '.'
out = 'build'

def options (ctx):
        ctx.load ("parallel_debug", "tooldir=".")

def configure(ctx):
        ctx.load ("parallel_debug", "tooldir=".")

def build(bld):
       #bld.add_group("group1")
       #bld.add_group("group2")Rules may be given as expression strings or as python function. The function is assigned to the task class created:

       #bld.set_group("group1")
       for i in range(10):     
            bld(    rule   = 'cp ${SRC} ${TGT}', 
                    source = 'wscript', 
                    target = 'foobar%d.txt'%i, 
		    color  = "BLUE"
               )
       #bld.set_group("group2")
       for i in range(10,20): 
            bld(    rule   = 'cp ${SRC} ${TGT}', 
                    source = 'wscript', 
                    target = 'foobar%d.txt'%i, 
		    color  = "PINK"
               )
#+END_SRC

#+BEGIN_VERSE
Compléter le script avec ces instructions, et exécuter la construction des cibles en parallèle.  Puis, décommenter les appels à =add_group=
et =set_group= pour forcer une exécution en 2 séquences.  
Visualiser le résultat pour ces deux cas, en utilisant les données fournies par l'outil de debug, enregistrées dans le fichier =pdebug.svg=
#+END_VERSE

** Génération de tâches

Nous avons vu comment définir des règles de construction via les
variables =${TGT}$= et =${SRC}$=.  Des règles plus complexes peuvent
être définies par des fonctions Python, retournant =0=, =None= ou
=False= en cas de succès. L'argument de ces fonctions est un objet
=Task= offrant quelques facilités, en particulier la méthode
=exec_command= dérivée du module Python =subprocess= qui est
thread-safe. Il est intéressant d'utiliser une fonction Python lorsque
plusieurs commandes doivent être exécutées pour une cible donnée. 

#+BEGIN_SRC Python
top = '.'
out = 'build'

def configure(conf):
        pass

def build(bld):
        def run(task): 
                src = task.inputs[0].abspath() 
                tgt = task.outputs[0].abspath() 
                cmd = 'cp %s %s' % (src, tgt)
                print(cmd)
                return task.exec_command(cmd) 

        bld(
                rule   = run, 
                source = 'wscript',
                target = 'foobar.txt',
        )
#+END_SRC

#+BEGIN_VERSE
Reprendre l'exemple précédant en utilisant la fonction =run= décrite ci-dessus. 
#+END_VERSE

Au plus niveau, il est également possible de dériver l'objet =Task= lui-même. 

#+BEGIN_SRC Python
from waflib.Task import Task
class cp(Task): 
   def run(self): 
      return self.exec_command('cp %s %s' % (self.inputs[0].abspath(), 
                                             self.outputs[0].abspath() )    )

def build(bld):
        t1 = cp(env=bld.env) 
        t1.set_inputs(bld.path.find_resource('wscript')) 
        t1.set_outputs(bld.path.find_or_declare('foobar.txt'))
        bld.add_to_group(t1) 

#+END_SRC

#+BEGIN_VERSE
Reprendre l'exemple précédant en utilisant la classe =cp= décrite ci-dessus. 
#+END_VERSE

** Chaînage par extension

Lorsqu'il est question d'industrialiser la construction d'objets, les
règles deviennent implicites, et les tâches sont construites à l'aide de
générateur de tâches (=TaskGen=). 

#+BEGIN_SRC Python
top = '.'
out = 'build'

def configure(conf):
        pass

def build(bld):
        bld (source='foo.in bar.in')

from waflib import TaskGen
TaskGen.declare_chain (name = "a",rule = "cp ${SRC} ${TGT}", ext_in = ".in", ext_out = ".a", reentrant = True)
TaskGen.declare_chain (name = "b",rule = "cp ${SRC} ${TGT}", ext_in = ".a", ext_out = ".b", reentrant = False)
#+END_SRC

#+BEGIN_VERSE
Reprendre l'exemple ci-dessus chaînant la construction de plusieurs objets en deux étapes: =.in= -> =.a= -> =.b= 
#+END_VERSE

Lorsque plusieurs extensions sont générées par une tâche, la simple
déclaration de chaînes devient insuffisante, et on recourt à la
définition de =callback= d'extension. Il s'agit d'une fonction Python
munie du décorateur associé à l'extension des fichiers sources.

Les callbacks reçoivent deux arguments en entrée: 
+ un générateur de tâche =TaskGen=
+ un noeud =node=, qui représente les entrées / sorties de la tâche

#+BEGIN_SRC Python
@extension(".in")
def my_callback (taskgen, node):
    output_node = node.change_ext (".a")
    taskgen.create_task ( cp, node, output_node)
#+END_SRC

#+BEGIN_VERSE
Remplacer, dans l'exemple précédent, la déclaration de chaînes par un callback inspiré de l'exemple ci-dessus.
#+END_VERSE

** Dépendances 

La gestion des dépendances se base sur 3 ingrédients, qui permettent
de contrôler la (re)-construction des objets. Il s'agit: 

+ des dépendances explicites: càd le contenu des fichiers sources
+ des dépendances implicites: càd le contenu de fichiers auxiliaires utilisés lors de la compilation. 
+ des valeurs: càd les options de configuration, flags de compilation, etc

Ces ingrédients sont utilisés pour définir une signature unique pour
chaque tâche, qui est associée aux objets générés par elle.  Si la
signature change, la tâche est ré-exécutée, et les nouveaux objets
produits sont associés à la nouvelle signature.
 
Pour forcer une dépendance à un fichier qui n'est pas explicitement
défini en tant qu'input, on utilise la méthode
=add_manual_dependency=.


#+BEGIN_SRC Python
top = '.'
out = 'build'

def configure(conf):
        pass

def build(bld):
        bld( rule   = 'cp ${SRC} ${TGT}', 
             source = 'wscript', 
             target = 'foobar.txt', 
           )
        bld.add_manual_dependency ( 
            bld.path.find_node ('testfile')
                                  )
#+END_SRC

#+BEGIN_VERSE
Construire la cible telle que définie ci-dessus.  Modifier le fichier auxiliaire =testfile=, et vérifier que la cible est bien reconstruite. 
#+END_VERSE

Lorsque les dépendances ne sont pas connues d'avance (par exemple, issues
d'une tâche créée dynamiquement), il est possible de chercher des
dépendances implicites à la volée, en utilisant la méthode =scan= des
objets =Task=.
  
#+BEGIN_SRC Python
top = '.'
out = 'build'

def configure(conf):
        pass

import time
from waflib.Task import Task
class cp(Task): 
   def run(self): 
      return self.exec_command('cp %s %s' % (self.inputs[0].abspath(), 
                                             self.outputs[0].abspath() ) 

   def scan(self):
      node = self.inputs[0].parent.find_resource('testfile')
      return ([node], time.time()) (ref:3)

   def runnable_status (self):  (ref:4)
      ret = super (cp, self).runnable_status()
      bld = self.generator.bld
      print ('nodes: %r' % bld.node_deps[self.uid()])
      print ('custom data: %r' % bld.raw_deps[self.uid()])

def build(bld):
        t1 = cp(env=bld.env) 
        t1.set_inputs(bld.path.find_resource('wscript')) 
        t1.set_outputs(bld.path.find_or_declare('foobar.txt'))
        bld.add_to_group(t1) 

#+END_SRC

[[(3)]] La méthode =scan= doit retouner un =set= composé d'une liste de
dépendance et d'une valeur personnalisée associée 

[[(4)]] Ces deux éléments sont accessibles via les attributs =node_deps=
et =raw_deps= du contexte =bld=, affichés dans cet exemple à l'appel
de =runnable_status=. 

#+BEGIN_VERSE
Modifier le script précédent afin de gérer la dépendance implicite à =testfile= via la méthode =scan=. 
Reproduire le test précédant vérifiant que la dépendance est bien prise en compte. 
#+END_VERSE

Enfin, les dépendances aux valeurs des options de configuration sont
gérées par l'attribut =vars= tel qu'illustré ci-dessous: 

#+BEGIN_SRC Python
def options (ctx):
        ctx.add_option('--flags', default='-f', dest='copyflags', type='string')

def configure(ctx):
        ctx.env.COPY      = '/bin/cp'
        ctx.env.COPYFLAGS = ctx.options.copyflags

def build(ctx):
        from waflib.Task import Task
        class copy(Task):
                run_str = '${COPY} ${COPYFLAGS} ${SRC} ${TGT}'
        print(copy.vars)

        tsk = copy(env=ctx.env)
        tsk.set_inputs(ctx.path.find_resource('wscript'))
        tsk.set_outputs(ctx.path.find_or_declare('foobar.txt'))
        ctx.add_to_group(tsk)
#+END_SRC

#+BEGIN_VERSE
Reprendre l'exemple ci-dessus, et vérifier que la dépendance est bien prise en compte pour différents flags (se référer au manuel de =cp= pour obtenir une liste des différents flags autorisés).
#+END_VERSE


** Mesure des performances

=waf= fournit un script permettant de réaliser quelques mesures de
performance, en comparaison avec d'autres outils de construction.

Il s'agit du fichier =perf/genbench.py= qui prend pour argument: 
+ un répertoire pour stocker les fichiers générés
+ un nombre de bibliothèques internes à construire
+ un nombre de classes =C++=  par bibliothèque
+ un nombre d'inclusion de fichier header interne par fichier source
+ un nombre d'inclusion de fichier header de bibliothèques externes par fichier source

Le script génère autant de bibliothèques, classes que spécifié par les
arguments dans le répertoire donné.  Ces fichiers sources sont
accompagnés d'un =wscript= pour construire les objets correspondants. 

#+BEGIN_VERSE
Générer un projet de taille raisonnable  =genbench.py /tmp/build 25 50 5 5= 
Le construire avec un puis 4 exécuteurs de tâches =waf configure build -p -j1=, =waf clean configure build -p -j4=
Mesurer les temps d'exécution à l'aide de la commande =time=. 
#+END_VERSE



* Extensions

** Un exemple

A ce niveau du TP, nous avons tous les concepts utilisés généralement
dans l'écriture d'extension.  Un exemple est montré ici à titre
illustratif, extrait du =wafbook=.

L'objectif est de construire les fichiers sources d'un projet dans un
langage arbitraire à partir d'une description abstraite: foo.idl ->
foo.c + foo.h

Puis dans un second temps, de construire le programme à partir de ces
sources.

#+BEGIN_SRC Python
top = '.'
out = 'build'

def configure(conf):
    conf.load('g++')

def build(bld):
    bld.program(
        source = 'foo.idl main.cpp',
        target = 'myapp', 
	includes = ["./"]
        )

from waflib.Task import Task
from waflib.TaskGen import extension

class idl(Task):
    run_str = 'cp ${SRC} ${TGT[0].abspath()} && touch ${TGT[1].abspath()}' 
    color   = 'BLUE'
    ext_out = ['.h'] 

@extension('.idl')
def process_idl(self, node):
    cpp_node = node.change_ext('.cpp')
    hpp_node = node.change_ext('.h')
    self.create_task('idl', node, [cpp_node, hpp_node]) 
    self.source.append(cpp_node) 
#+END_SRC

#+BEGIN_VERSE
A partir du sous répertoire =extension=, exécuter la commande =./waf distclean configure build -v=. \\
Vérifier que la séquence de construction correspond bien à l'énoncé. 
#+END_VERSE


** Ecrire une extension
   

